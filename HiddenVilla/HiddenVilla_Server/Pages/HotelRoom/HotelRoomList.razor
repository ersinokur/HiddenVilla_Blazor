@page "/hotel-room"
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigateMan
@inject IJSRuntime JSRuntime
@inject IFileUpload FileUpload

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>SqFt</th>
                    <th>

                    </th>

                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    foreach (var room in HotelRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.ToString("c")</td>
                            <td>@room.SqFt</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=> HandleDelete(room.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No record found</td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"/>

@code {
    private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;
    //private bool IsDeleteProcessComplete { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetALLHotelRooms();
    }


    public async Task HandleDelete(int rooomId)
    {
        DeleteRoomId = rooomId;
        //   IsDeleteProcessComplete = false;
        await JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");

    }


    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && DeleteRoomId != null)
        {
            HotelRoomDTO hotelroom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);



            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JSRuntime.ToastrSuccess("ShowSwal", "Hotel room deleted succesfully");
            HotelRooms = await HotelRoomRepository.GetALLHotelRooms(); ;

        }
        await JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    }


}
